package com.appContainer.rest;


import com.appContainer.entities.Customer;
import com.appContainer.exceptions.CustomerNotFoundException;
import com.appContainer.services.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RequestMapping("/api/customers")
@RestController
public class CustomerRestController {

    private final CustomerService customerService;

    @Autowired
    public CustomerRestController(CustomerService customerService) {
        this.customerService = customerService;
    }

    @GetMapping("/list")
    public List<Customer> getCustomerList() {
        return customerService.getCustomers();
    }

    @PostMapping
    public Customer saveCustomer(@RequestBody Customer customer) {
        // if customer id is empty ( null or 0 ) then a new entry will be added
        // the empty id will be replaced by the id generated by the database (See entity -> GenerationType strategy)
        // see hibernate method 'saveOrUpdate'
        customer.setId(0);
        customerService.saveCustomer(customer);
        return customer;
    }

    @GetMapping("/{customerId}")
    public Customer getCustomer(@PathVariable int customerId) throws CustomerNotFoundException {
        Customer existingCustomer = customerService.getCustomer(customerId);
        if (existingCustomer == null) {
            throw new CustomerNotFoundException("Customer not found");
        }
        return existingCustomer;
    }

    // saveOrUpdate method will update the record if the passed in record has an id!
    @PutMapping
    public Customer updateCustomer(@RequestBody Customer customer) {
        // customer object has already an id, passed in by the client --> record will be updated
        customerService.saveCustomer(customer);
        return customer;
    }

    @DeleteMapping("/{customerId}")
    public Customer deleteCustomer(@PathVariable int customerId) throws CustomerNotFoundException {
        Customer existingCustomer = customerService.getCustomer(customerId);
        if (existingCustomer == null) {
            throw new CustomerNotFoundException("The customer you are trying to delete, does not exists");
        }

        customerService.deleteCustomer(customerId);
        return existingCustomer;
    }
}
